Vuex란?
 - 무수히 많은 컴포넌트의 데이터를 관리하기 위한 상태 관리 패턴이자 라이브러리
 - React의 Flux 패턴에서 기인함
 - Vue.js 중고급 개발자로 성장하기 위한 필수 관문

Flux란?
 - MVC 패턴의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴
 - Unidirectinal data flow(데이터 흐름이 한 방향으로만 흐른다)

 - Action ----> Dispatcher -----> Model -----> View -----> Action ------> Dispatcher

 1. Action: 화면에서 발생하는 이벤트 또는 사용자의 입력
 2. Dispatcher: 데이터를 변경하는 방법, 메서드
 3. Model: 화면에 표시할 데이터
 4. View: 사용자에게 비춰지는 화면

MVC 패턴의 문제점
 - 기능 추가 및 변경에 따라 생기는 문제점을 예측할 수 없음. ex) 페이스북 채팅 화면
 - 앱이 복잡해지면서 생기는 업데이트 루프


Vuex가 필요한 이유?
 - 복잡한 애플리케이션에서 컴포넌트의 개수가 많아지면 컴포넌트 간에 데이터 전달이 어려워 진다.
 - 만약 로그인 폼 -> 로그인 -> .....  -> 메인으로 갔다가 ----> 메인으로 간다고 할 때
   이벤트 버스로 한단계씩 이벤트로 올리게되면 데이터가 어디서 왔는지 알 수가 없다.
   이러한 문제를 해결 가능
 - 1. MVC 패턴에서 발생하는 구조적오류
   2. 컴포넌트 간 데이터 전달 명시
   3. 여러 개의 컴포넌트에서 같은 데이터를 업데이트할 때 동기화문제
   ------>> Vuex가 이 문제들을 해결할 수 있다.

Vuex 컨셉
 - State: 컴포넌트 간에 공유하는 데이터 data()
 - View: 데이터를 표시하는 화면 template
 - Action: 사용자의 입력에 따라 데이터를 변경하는 methods
 뷰 컴포넌트 -> 비동기 로직(Actions)[여기서 BackendApI를 받음] -> 동기 로직(Mutations)[Devtools] -> 상태
  *--- 인프런 강의 참고(Vuex가 필요한 이유, 컨셉, 구조) ---*



